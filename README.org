#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil tex:t
#+TITLE: MathematicaStan v2.0
#+SUBTITLE: A Mathematica (v11+) package to interact with CmdStan
#+AUTHOR: Picaud Vincent


#+RESULTS:

* Introduction


*MathematicaStan* is a package to interact with [[http://mc-stan.org/interfaces/cmdstan][CmdStan]] from
Mathematica. It is developed under *Linux* and is compatible with
*Mathematica v11+*

It should work under Windows but you have to be careful about the way you
enter paths:
- under Linux:
#+BEGIN_EXAMPLE
SetCmdStanDirectory["~/GitHub/cmdstan"];
#+END_EXAMPLE
- under Windows:
#+BEGIN_EXAMPLE
SetCmdStanDirectory["C:\\Users\\USERNAME\\Documents\\R\\..."; 
#+END_EXAMPLE

*Author & contact:* picaud.vincent at gmail.com

*Windows version:* 
 - Thanks to Jeff Patterson for his contribution

** News
*** 2019-06-28 

*New* MathematicaStan v2.0! This version uses Mathematica v11 and has
been completely refactored (caveat: breaking changes!) 

*** 2017-08-01 

Last MathematicaStan version based on Mathematica v8.0 (this is
the v1.0 git branch).

* Installation

** The Stan CmdStan shell interface

First you must install [[http://mc-stan.org/interfaces/cmdstan][CmdStan]]. Once this is done you get a directory containing stuff like:

#+BEGIN_EXAMPLE
bin  examples  LICENSE  make  makefile  README.md  runCmdStanTests.py  src  stan  test-all.sh
#+END_EXAMPLE

In my case, *CmdStan* is installed there:
#+BEGIN_EXAMPLE
~/GitHub/cmdstan
#+END_EXAMPLE

For Windows users it is possibly something like:
#+BEGIN_EXAMPLE
C:\\Users\\USER_NAME\\Documents\\R\\cmdstan-?.??.?
#+END_EXAMPLE

** The CmdStan Mathematica package

Open the *CmdStan.m* package file with *Mathematica*. Then install it
using the Mathematica Notebook *File->Install* Menu.

** First run

The first time you load the package
#+BEGIN_SRC mathematica :eval never
<<CmdStan`
#+END_SRC
you will get an error message:
#+BEGIN_EXAMPLE
CmdStan::cmdStanDirectoryNotDefined: CmdStan directory does not exist, use SetCmdStanDirectory[dir] to define it (with something like SetCmdStanDirectory["~/GitHub/cmdstan"])
#+END_EXAMPLE
This is normal as we do not have defined where the shell interface to
 Stan root directory is.  With my configuration I do
#+BEGIN_SRC matheematica :eval never
SetCmdStanDirectory["~/GitHub/cmdstan"]
#+END_SRC

*Note:* this location is recorded in the =$CmdStanConfigurationFile= file
 and you will not have to redefine it next time you use the
 MathematicaStan package.


* Tutorial

** Introduction

Import the package as usual

#+BEGIN_SRC mathematica :eval never
<<CmdStan`
#+END_SRC

This package defines these functions (and symbols):

#+BEGIN_SRC mathematica :eval never
?CmdStan`*
#+END_SRC

| CmdStan         | ExportStanData      | GetStanResultMetaData | OptimizeDefaultOptions | SetCmdStanDirectory | StanResult                |
| CmdStanVerbose  | GetCmdStanDirectory | ImportStanResult      | RemoveStanOption       | SetStanOption       | VariationalDefaultOptions |
| CompileStanCode | GetStanOption       | MapStanResult         | RunStan                | StanOptionExistsQ   | $CmdStanConfigurationFile |
| ExportStanCode  | GetStanResult       | MapStanResultMetaData | SampleDefaultOptions   | StanOptions         |                           |

To package usage is illustrated using a simple [[https://mc-stan.org/docs/2_19/stan-users-guide/linear-regression.html][linear regression]]
example. We will work in a temporary location:

#+BEGIN_SRC mathematica :eval never
SetDirectory[$TemporaryDirectory]
#+END_SRC

** Stan file code 

Define the Stan code
#+BEGIN_SRC mathematica :eval never
stancode = "data
  {
    int<lower = 0> N;
    vector[N] x;
    vector[N] y;
  }
  parameters
  {
    real alpha;
    real beta;
    real<lower = 0> sigma;
  }
  model {
    y ~normal(alpha + beta * x, sigma);
  }";
#+END_SRC

and export it

#+BEGIN_SRC mathematica :eval never
stanCodeFile = ExportStanCode["linear_regression.stan", stanCode]
#+END_SRC
#+BEGIN_EXAMPLE
/tmp/linear_regression.stan
#+END_EXAMPLE

** Code compilation

Stan code compilation is performed by (attention this can take some time):
 #+BEGIN_SRC mathematica :eval never
stanExeFile = CompileStanCode[stanCodeFile]
 #+END_SRC

With my configuration I get:
 #+BEGIN_EXAMPLE
make: Entering directory '/home/picaud/ExternalSoftware/cmdstan-2.19.1'

--- Translating Stan model to C++ code ---
bin/stanc  --o=/tmp/linear_regression.hpp /tmp/linear_regression.stan
Model name=linear_regression_model
Input file=/tmp/linear_regression.stan
Output file=/tmp/linear_regression.hpp
g++ -std=c++1y -pthread -Wno-sign-compare     -O3 -I src -I stan/src -I stan/lib/stan_math/ -I stan/lib/stan_math/lib/eigen_3.3.3 -I stan/lib/stan_math/lib/boost_1.69.0 -I stan/lib/stan_math/lib/sundials_4.1.0/include    -DBOOST_RESULT_OF_USE_TR1 -DBOOST_NO_DECLTYPE -DBOOST_DISABLE_ASSERTS -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION     -c -MT /tmp/linear_regression.o -MT /tmp/linear_regression -include /tmp/linear_regression.hpp -include src/cmdstan/main.cpp -MM -E -MG -MP -MF /tmp/linear_regression.d /tmp/linear_regression.hpp

--- Linking C++ model ---
g++ -std=c++1y -pthread -Wno-sign-compare     -O3 -I src -I stan/src -I stan/lib/stan_math/ -I stan/lib/stan_math/lib/eigen_3.3.3 -I stan/lib/stan_math/lib/boost_1.69.0 -I stan/lib/stan_math/lib/sundials_4.1.0/include    -DBOOST_RESULT_OF_USE_TR1 -DBOOST_NO_DECLTYPE -DBOOST_DISABLE_ASSERTS -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION             -include /tmp/linear_regression.hpp src/cmdstan/main.cpp        stan/lib/stan_math/lib/sundials_4.1.0/lib/libsundials_nvecserial.a stan/lib/stan_math/lib/sundials_4.1.0/lib/libsundials_cvodes.a stan/lib/stan_math/lib/sundials_4.1.0/lib/libsundials_idas.a  -o /tmp/linear_regression
make: Leaving directory '/home/picaud/ExternalSoftware/cmdstan-2.19.1'
 #+END_EXAMPLE

*Note:* if you do not want to have information printed you can use the =StanVerbose= option:

 #+BEGIN_SRC mathematica :eval never
stanExeFile = CompileStanCode[stanCodeFile, StanVerbose -> False]
 #+END_SRC

** Simulate data

Let's simulate some data:
 #+BEGIN_SRC mathematica :eval never
σ = 3; α = 1; β = 2;
n = 20;
X = Range[n];
Y = α + β*x + RandomVariate[NormalDistribution[0, σ], n];
Show[Plot[α + β*x, {x, Min[X], Max[X]}], 
     ListPlot[Transpose@{X, Y}, PlotStyle -> Red]]
 #+END_SRC

[[file:figures/linRegData.png][file:./figures/linRegData.png]]

** Create the =data.R= data file 

#+BEGIN_SRC mathematica :eval never
stanData = <|"N" -> n, "x" -> X, "y" -> Y|>;
stanDataFile = ExportStanData[stanExeFile, stanData]
#+END_SRC

#+BEGIN_EXAMPLE
/tmp/linear_regression.data.R
#+END_EXAMPLE

*Note:* this function returns the created file
name =/tmp/linear_regression.data.R=. Its first argument, =stanExeFile=
is simply the Stan executable file name with its path. The
=ExportStanData[]= function modifies the file name extension and
replace it with ".data.R", but you can use it with
any file name:
#+BEGIN_SRC mathematica :eval never
ExportStanData["~/tmp/my_custom_filename.data.R",stanData]
#+END_SRC

** Run Stan, likelihood maximization

We are now able to run the =stanExeFile= executable. 

Let's start by maximizing the likelihood
#+BEGIN_SRC mathematica :eval never
stanResultFile = RunStan[stanExeFile, OptimizeDefaultOptions]
#+END_SRC

#+BEGIN_EXAMPLE
Running: /tmp/linear_regression method=optimize data file=/tmp/linear_regression.data.R output file=/tmp/linear_regression.csv

method = optimize
  optimize
    algorithm = lbfgs (Default)
      lbfgs
        init_alpha = 0.001 (Default)
        tol_obj = 9.9999999999999998e-13 (Default)
        tol_rel_obj = 10000 (Default)
        tol_grad = 1e-08 (Default)
        tol_rel_grad = 10000000 (Default)
        tol_param = 1e-08 (Default)
        history_size = 5 (Default)
    iter = 2000 (Default)
    save_iterations = 0 (Default)
id = 0 (Default)
data
  file = /tmp/linear_regression.data.R
init = 2 (Default)
random
  seed = 2775739062
output
  file = /tmp/linear_regression.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)

Initial log joint probability = -8459.75
    Iter      log prob        ||dx||      ||grad||       alpha      alpha0  # evals  Notes 
      19      -32.5116    0.00318011    0.00121546      0.9563      0.9563       52   
Optimization terminated normally: 
  Convergence detected: relative gradient magnitude is below tolerance
#+END_EXAMPLE

The =stanResultFile= variable contains now the csv result file:
#+BEGIN_EXAMPLE
/tmp/linear_regression.csv
#+END_EXAMPLE

*Note:* if you do not want prints, use the =StanVerbose->False= option.

#+BEGIN_SRC mathematica :eval never
stanResultFile = RunStan[stanExeFile, OptimizeDefaultOptions,StanVerbose->False]
#+END_SRC

*Note:* the method we chose is defined by the second argument
=OptimizeDefaultOptions= If you want to use Variational Bayes or HMC
sampling you must use =RunStan[]= with =VariationalDefaultOptions= or
=SampleDefaultOptions= instead. We will detail option later.

** Load the csv result file

To load the This is performed by 

#+BEGIN_SRC mathematica :eval never
stanResult = RunStan[stanResultFile]
#+END_SRC

prints
#+BEGIN_EXAMPLE
    file: /tmp/linear_regression.csv
metaData: lp__ 
    data: alpha , beta , sigma 
#+END_EXAMPLE

To access estimated variable α, β and σ, simply do:
#+BEGIN_SRC mathematica :eval never

GetStanResultMetaData[stanResult, "lp__"]
αe=GetStanResult[stanResult, "alpha"]
βe=GetStanResult[stanResult, "beta"]
σe=GetStanResult[stanResult, "sigma"]
#+END_SRC

which prints:

#+BEGIN_EXAMPLE
{-32.5116}
{2.51749}
{1.83654}
{3.08191}
#+END_EXAMPLE

You can plot the estimated line:

#+BEGIN_SRC mathematica :eval never
Show[Plot[{αe + βe*x, α + β*x}, {x, Min[X],Max[X]}, PlotLegends -> "Expressions"], 
     ListPlot[Transpose@{X, Y}, PlotStyle -> Red]]
#+END_SRC

[[file:./figures/linRegEstimate.png]]


** soft-k-means.stan example

This use case is based on the [[https://github.com/stan-dev/example-models/blob/master/misc/cluster/soft-k-means/soft-k-means.stan][soft-k-means]] example. 

You can find the Mathematica notebook [[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/Cluster/soft-k-means.nb][soft-k-means.nb]] or directly view
the associated [[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/Cluster/soft-k-means.pdf][soft-k-means.pdf]] file.

* Package documentation

** Complete list of commands

The complete list of commands is:


** Individual function documentation

   To get extra information about a peculiar function you can proceed as usual:

 #+BEGIN_SRC mathematica :exports both
Needs["CmdStan`"];
?RDumpExport
 #+END_SRC

 #+RESULTS:
 : RDumpExport[fileNameDataR_?StringQ,listOfNameValue_]
 : 
 : Creates a file and dump data in RDump format.
 : 
 : Note:
 :  - input data "listOfNameValue" is of the form 
 :    {{"MatrixName",{{...}}},{"ScalarName",5.6},{"VectorName",{..}},...}
 :  - if "fileName" has no extension, ".data.R" is automatically added.

** Selected topics documentation

Waiting for a more complete documentation, this section provides some
specialized information.

*** How to modify options
    :PROPERTIES:
    :ID:       34ed6782-8c12-413f-b390-248bef2668cb
    :END:

    The options are organized in a hierarchical way and you must
provide this information when you want to modify option values. Options
organization are described in the [[http://mc-stan.org/interfaces/cmdstan][CmdStan user guide ("Command-Line
Options" section)]].

In *MathemeticaStan* you have *3* predefined option lists that you can print using:

#+BEGIN_SRC mathematica :exports code
StanOptionOptimize[]
StanOptionSample[]
StanOptionVariational[]
#+END_SRC

Initial value is an empty list.

If you want to modify option for the *Optimize* method you must
explictly provide the hierarchical information:

#+NAME: doc_option_optimize_example.m
#+BEGIN_SRC mathematica :exports code 
StanSetOptionOptimize["output.file","output_optimize.csv"];  
StanSetOptionOptimize["method.optimize.iter", 100]; 
StanSetOptionOptimize["method.optimize.algorithm", "bfgs"];
StanSetOptionOptimize["method.optimize.algorithm.bfgs.tol_grad", 10.^-5];
#+END_SRC

You can now view the option list:

#+BEGIN_SRC mathematica :exports code
StanOptionOptimize[]
#+END_SRC

#+BEGIN_SRC mathematica :exports results :noweb yes
Needs["CmdStan`"];
<<doc_option_optimize_example.m>>
Print[StanOptionOptimize[]]
#+END_SRC

#+RESULTS:
| method.optimize.algorithm.bfgs.tol_grad |               1e-05 |
| method.optimize.algorithm               |                bfgs |
| method.optimize.iter                    |                 100 |
| output.file                             | output_optimize.csv |

Note that it is possible to overwrite option value
#+BEGIN_SRC mathematica :exports code 
StanSetOptionOptimize["method.optimize.iter", 2016]; 
#+END_SRC

or to remove a peculiar option (given its exact name or a pattern).
#+BEGIN_SRC mathematica :exports code 
StanRemoveOptionOptimize["method.optimize.iter"]; (* remove "method.optimize.iter" option *)
StanRemoveOptionOptimize["method*"]; (* remove ALL method* options *)
#+END_SRC

You can also remove *all* defined options by:
#+BEGIN_SRC mathematica :exports code 
StanResetOptionOptimize[]
#+END_SRC

These option manipulations are illustrated in the [[file:Examples/Bernoulli/bernoulli.pdf][Bernoulli example]].

*** Generated =output.csv= file and path
    :PROPERTIES:
    :ID:       235b4629-7d1b-4843-a23f-c639b5980850
    :END:

*CAVEAT:* by default the generated =output.csv= file is created into the current directory
#+BEGIN_SRC mathematica :exports code 
Directory[]
#+END_SRC

If you want to modify this output directory you have two choices:
- Change the current directory of your Mathematica session:
#+BEGIN_SRC mathematica :exports code 
SetDirectory["NewPathForOutputCSV/"]
#+END_SRC
- Modify the "output.file" option (see [[id:34ed6782-8c12-413f-b390-248bef2668cb][How to modify options]])
#+BEGIN_SRC mathematica :exports code 
StanSetOptionOptimize["output.file","NewPathForOutputCSV/output_optimize.csv"];  
#+END_SRC

*** Output variable access and manipulation
    :PROPERTIES:
    :ID:       0ea4dd0f-6504-4cbf-aed6-95c707e2c069
    :END:

Output importation and information extractions are illustrated in the [[file:Examples/Cluster/soft-k-means.pdf][soft-k-means example]].

The involved functions are:

#+BEGIN_SRC mathematica :exports code 
StanFindVariableColumn[...];
StanFindVariableIndex[...];

StanVariable[...]
StanVariableColumn[...];

StanVariableFunc[...];
#+END_SRC


*** Parallel sampling (Linux only)

Illustrated in the [[file:Examples/Bernoulli/bernoulli.pdf][Bernoulli example]].
