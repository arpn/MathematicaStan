#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil tex:t
#+TITLE: MathematicaStan
#+SUBTITLE: A Mathematica package to interact with CmdStan
#+AUTHOR: Picaud Vincent

* Introduction

*MathematicaStan* is a package to interact with [[http://mc-stan.org/interfaces/cmdstan][CmdStan]] from
Mathematica. It is developed under *Linux* and is compatible with
*Mathematica v8.0*.

It works under Windows but you have to be careful about the way you
enter paths:
- under Linux:
#+BEGIN_EXAMPLE
StanSetDirectory["YOUR_PATH/cmdstan"];
#+END_EXAMPLE
- under Windows:
#+BEGIN_EXAMPLE
StanSetDirectory["C:\\Users\\USER_NAME\\Documents\\R\\cmdstan-2.12.0"; 
#+END_EXAMPLE

*Author & contact:* picaud.vincent at gmail.com

*Windows version:* many thanks to Jeff Patterson for his valuable contribution.

* Getting started

** Installation

*** Creation of the CmdStan.m file (*not required*)

*You can skip this step, a [[CmdStan.m][CmdStan.m]] file is already present in this
directory.*

Otherwise you have to know that the [[CmdStan.m][CmdStan.m]] file is automatically
created from the [[CmdStan.org][CmdStan.org]] file using Emacs + [[http://orgmode.org/][org-mode]]. To generate
the *CmdStan.m*, open the *CmdStan.org* file with Emacs and type *c-c
c-v t* to create the *CmdStan.m* file.

*** CmdStan installation 

First you must install [[http://mc-stan.org/interfaces/cmdstan][CmdStan]]. Once this is done you get a directory containing stuff like:

#+BEGIN_EXAMPLE
bin  examples  LICENSE  make  makefile  README.md  runCmdStanTests.py  src  stan  test-all.sh
#+END_EXAMPLE

In my case, *CmdStan* is installed there:
#+BEGIN_EXAMPLE
~/GitHub/cmdstan
#+END_EXAMPLE

For Windows users it is possibly something like:
#+BEGIN_EXAMPLE
C:\\Users\\USER_NAME\\Documents\\R\\cmdstan-2.12.0
#+END_EXAMPLE

*** CmdStan.m installation

Download the package *CmdStan.m* and open it with *Mathematica*. The
simplest way to install the package is to go to the Mathematica
*File->Install* Menu, then follow the instructions.

*** CmdStan.m configuration

There are two possibilities:

- You define where [[http://mc-stan.org/interfaces/cmdstan][CmdStan]] is installed for each Mathematica session:
#+BEGIN_SRC mathematica :exports code
Needs["CmdStan`"];

(* Uncomment me for Linux *)
StanSetDirectory["YOUR_PATH/cmdstan"]; 

(* Uncomment me for Windows *)
(* StanSetdirectory["C:\\Users\\USER_NAME\\Documents\\R\\cmdstan-2.12.0"]; *)
#+END_SRC

#+RESULTS:
: CmdStanError::stanDirNotFound: CmdStan install directory "YOUR_PATH/cmdstan" not found.

- You define once for all, the *stanDir* variable in the package code source. 
  Your *CmdStan.m* package, after installation, is generally stored there (at least under Linux):
#+BEGIN_EXAMPLE
~/.Mathematica/Applications/CmdStan.m
#+END_EXAMPLE
  edit it and modify the line:
#+BEGIN_EXAMPLE
(* You can modify me (initial configuration) *)
stanDir="~/GitHub/cmdstan"; 

(* or for Windows *)
(* stanDir="C:\\Users\\USER_NAME\\Documents\\R\\cmdstan-2.12.0"; *)
#+END_EXAMPLE
  according to your configuration.


** Complete examples

For the moment use cases are illustrated by 3 examples. For these
examples the *Mathematica notebooks* and the associated *pdf* files
are available. Note that the *pdf* file are better viewed with an
external software like evince or okular... for a reason I ignore, the
GitHub version is not good (type "download" to open the pdf with your
external pdf viewer).

** Bernoulli.stan 

We use the Examples/Bernoulli/bernoulli.stan example. You can find the
Mathematica notebook [[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/Bernoulli/bernoulli.nb][bernoulli.nb]] or directly view the associated
[[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/Bernoulli/bernoulli.pdf][bernoulli.pdf]] file.

** horseShoePrior.stan example

This example is a partial reproduction of the blog post [[https://ariddell.org/horseshoe-prior-with-stan.html][Epistemology
of the corral: regression and variable selection with Stan and the
Horseshoe prior]]. Also see [[http://andrewgelman.com/2015/02/17/bayesian-survival-analysis-horseshoe-priors/#comment-211738][Bayesian survival analysis with horseshoe priorsâ€”in Stan!]]

You can find the Mathematica notebook [[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/HorseShoePrior/horseShoePrior.nb][horseShoePrior.nb]] or directly view
the associated [[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/HorseShoePrior/horseShoePrior.pdf][horseShoePrior.pdf]] file.

** soft-k-means.stan example

This use case is based on the [[https://github.com/stan-dev/example-models/blob/master/misc/cluster/soft-k-means/soft-k-means.stan][soft-k-means]] example. 

You can find the Mathematica notebook [[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/Cluster/soft-k-means.nb][soft-k-means.nb]] or directly view
the associated [[https://github.com/vincent-picaud/MathematicaStan/blob/master/Examples/Cluster/soft-k-means.pdf][soft-k-means.pdf]] file.

* Package documentation

** Complete list of commands

The complete list of commands is:

#+BEGIN_SRC mathematica :exports both
Needs["CmdStan`"];
?CmdStan`*
#+END_SRC

#+RESULTS:
#+begin_example
RDumpExport
StanCodeExport
StanCompile
StanDirectory
StanFindVariableColumn
StanFindVariableIndex
StanGetOptionOptimize
StanGetOptionSample
StanGetOptionVariational
StanImport
StanImportComment
StanImportData
StanImportHeader
StanOptionOptimize
StanOptionSample
StanOptionVariational
StanRemoveOptionOptimize
StanRemoveOptionSample
StanRemoveOptionVariational
StanResetOptionOptimize
StanResetOptionSample
StanResetOptionVariational
StanRunOptimize
StanRunParallelSample
StanRunSample
StanRunVariational
StanSetDirectory
StanSetOptionOptimize
StanSetOptionSample
StanSetOptionVariational
StanVariable
StanVariableBoxPlot
StanVariableColumn
StanVariableFunc
StanVariableToImport
#+end_example

** Individual function documentation

   To get extra information about a peculiar function you can proceed as usual:

 #+BEGIN_SRC mathematica :exports both
Needs["CmdStan`"];
?RDumpExport
 #+END_SRC

 #+RESULTS:
 : RDumpExport[fileNameDataR_?StringQ,listOfNameValue_]
 : 
 : Creates a file and dump data in RDump format.
 : 
 : Note:
 :  - input data "listOfNameValue" is of the form 
 :    {{"MatrixName",{{...}}},{"ScalarName",5.6},{"VectorName",{..}},...}
 :  - if "fileName" has no extension, ".data.R" is automatically added.

** Selected topics documentation

Waiting for a more complete documentation, this section provides some
specialized information.

*** How to modify options

    The options are organized in a hierarchical way and you must
provide this information when you want to modify option values. Options
organization are described in the [[http://mc-stan.org/interfaces/cmdstan][CmdStan user guide ("Command-Line
Options" section)]].

In *MathemeticaStan* you have *3* predefined option lists that you can print using:

#+BEGIN_SRC mathematica :exports code
StanOptionOptimize[]
StanOptionSample[]
StanOptionVariational[]
#+END_SRC

Initial value is an empty list.

If you want to modify option for the *Optimize* method you must
explictly provide the hierarchical information:

#+NAME: doc_option_optimize_example.m
#+BEGIN_SRC mathematica :exports code 
StanSetOptionOptimize["output.file","output_optimize.csv"];  
StanSetOptionOptimize["method.optimize.iter", 100]; 
StanSetOptionOptimize["method.optimize.algorithm", "bfgs"];
StanSetOptionOptimize["method.optimize.algorithm.bfgs.tol_grad", 10.^-5];
#+END_SRC

You can now view the option list:

#+BEGIN_SRC mathematica :exports code
StanOptionOptimize[]
#+END_SRC

#+BEGIN_SRC mathematica :exports results :noweb yes
Needs["CmdStan`"];
<<doc_option_optimize_example.m>>
Print[StanOptionOptimize[]]
#+END_SRC

#+RESULTS:
| method.optimize.algorithm.bfgs.tol_grad |               1e-05 |
| method.optimize.algorithm               |                bfgs |
| method.optimize.iter                    |                 100 |
| output.file                             | output_optimize.csv |

Note that it is possible to overwrite option value
#+BEGIN_SRC mathematica :exports code 
StanSetOptionOptimize["method.optimize.iter", 2016]; 
#+END_SRC

or to remove a peculiar option (given its exact name or a pattern).
#+BEGIN_SRC mathematica :exports code 
StanRemoveOptionOptimize["method.optimize.iter"]; (* remove "method.optimize.iter" option *)
StanRemoveOptionOptimize["method*"]; (* remove ALL method* options *)
#+END_SRC

You can also remove *all* defined options by:
#+BEGIN_SRC mathematica :exports code 
StanResetOptionOptimize[]
#+END_SRC

These option manipulations are illustrated in the [[Examples/Bernoulli/bernoulli.pdf][Bernoulli example]].

*** Output variable access and manipulation

Output importation and information extractions are illustrated in the [[Examples/Cluster/soft-k-means.pdf][soft-k-means example]].

The involved functions are:

#+BEGIN_SRC mathematica :exports code 
StanFindVariableColumn[...];
StanFindVariableIndex[...];

StanVariable[...]
StanVariableColumn[...];

StanVariableFunc[...];
#+END_SRC


