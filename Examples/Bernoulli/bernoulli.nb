(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     54603,       1429]
NotebookOptionsPosition[     51238,       1306]
NotebookOutlinePosition[     51619,       1323]
CellTagsIndexPosition[     51576,       1320]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Bernoulli example", "Title",
 CellChangeTimes->{{3.683438689680354*^9, 3.6834386998904676`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Define the working directory and load CmdStan.m\
\>", "Subsection",
 CellChangeTimes->{{3.682417683952396*^9, 3.6824177009258537`*^9}, {
  3.682418364173077*^9, 3.6824183771051903`*^9}, {3.685424465142171*^9, 
  3.68542446661866*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Linux", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
   "SetDirectory", "[", "\"\<~/GitHub/MathematicaStan/Examples/Bernoulli\>\"",
     "]"}], "\n", "\n", 
   RowBox[{"(*", " ", "Windows", " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "SetDirectory", "[", 
     "\"\<C:\\\\Users\\\\USER_NAME\\\\Documents\\\\Mathematica\\\\STAN\\\\\
Examples\\\\Bernoulli\>\"", "]"}], " ", "*)"}], "\n", "\n", 
   RowBox[{"Needs", "[", "\"\<CmdStan`\>\"", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.682417433722479*^9, 3.682417484762342*^9}, {
   3.6824176683558273`*^9, 3.682417678474187*^9}, {3.682417715120927*^9, 
   3.682417715955593*^9}, {3.6853788906088257`*^9, 3.6853789332699747`*^9}, {
   3.685379243109315*^9, 3.6853792904574833`*^9}, 3.6853794110685043`*^9}],

Cell[BoxData["\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/\
Bernoulli\"\>"], "Output",
 CellChangeTimes->{{3.6824174774167967`*^9, 3.6824174850587606`*^9}, 
   3.682417719228777*^9, 3.682417840476893*^9, 3.68241789730019*^9, 
   3.6824197943814363`*^9, 3.682419857480072*^9, 3.6826767253863487`*^9, 
   3.682676786557558*^9, {3.685947015592606*^9, 3.6859470169750357`*^9}, {
   3.685947568279253*^9, 3.685947568989588*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate the Bernoulli Stan code and compile it", "Subsection",
 CellChangeTimes->{{3.682417725394589*^9, 3.68241773993467*^9}, {
  3.682417772938354*^9, 3.682417778942779*^9}, {3.6824179590515223`*^9, 
  3.682417959640943*^9}, {3.682418357241733*^9, 3.6824183612052097`*^9}, {
  3.685424472826462*^9, 3.68542447405484*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "stanCode", "=", 
   "\"\<data { \n  int<lower=0> N; \n  int<lower=0,upper=1> y[N];\n} \n\
parameters {\n  real<lower=0,upper=1> theta;\n} \nmodel {\n  theta ~ \
beta(1,1);\n  for (n in 1:N) \n    y[n] ~ bernoulli(theta);\n}\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"StanCodeExport", "[", 
   RowBox[{"\"\<bernoulli\>\"", ",", "stanCode"}], "]"}], 
  "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "your", " ", 
    RowBox[{"code", "."}], "\n", " ", "*", " ", 
    RowBox[{"Caveat", ":", " ", 
     RowBox[{"this", " ", "can", " ", "take", " ", "some", " ", "time"}]}]}], 
   "\n", " ", "*)"}]}], "\n", 
 RowBox[{"StanCompile", "[", "\"\<bernoulli\>\"", "]"}]}], "Code",
 CellChangeTimes->{{3.682417531384315*^9, 3.682417560066251*^9}, {
   3.682417750149807*^9, 3.6824177507294483`*^9}, {3.682417791402915*^9, 
   3.682417824763042*^9}, 3.682418240691452*^9, {3.683438716584861*^9, 
   3.683438734003086*^9}}],

Cell[BoxData["\<\"bernoulli.stan\"\>"], "Output",
 CellChangeTimes->{3.6824178079681273`*^9, 3.6824178408587*^9, 
  3.682417897565946*^9, 3.682419794751006*^9, 3.682676725678926*^9, 
  3.685947015740979*^9, 3.685947570536931*^9}],

Cell[BoxData["\<\"make: \
'/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli' is \
up to date.\"\>"], "Output",
 CellChangeTimes->{3.6824178079681273`*^9, 3.6824178408587*^9, 
  3.682417897565946*^9, 3.682419794751006*^9, 3.682676725678926*^9, 
  3.685947015740979*^9, 3.6859475705808268`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate some data and save them (RDump file)", "Subsection",
 CellChangeTimes->{{3.682418543892269*^9, 3.6824185617930813`*^9}, {
  3.6854244806249237`*^9, 3.685424481732832*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "1000"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"y", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Random", "[", 
       RowBox[{"BernoulliDistribution", "[", "0.2016", "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RDumpExport", "[", 
   RowBox[{"\"\<bernoulli\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<N\>\"", ",", "n"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<y\>\"", ",", "y"}], "}"}]}], "}"}]}], "]"}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.682417617178146*^9, 3.682417617178854*^9}, 
   3.6824177655681677`*^9, {3.6824185704079523`*^9, 3.6824185874093933`*^9}, {
   3.682418717916582*^9, 3.682418721613139*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Run Stan and get result", "Subsection",
 CellChangeTimes->{{3.6824185989000177`*^9, 3.682418625368246*^9}, {
  3.685424483209653*^9, 3.6854244854841127`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"StanRunSample", "[", "\"\<bernoulli\>\"", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"output", "=", 
   RowBox[{"StanImport", "[", "\"\<output.csv\>\"", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.682418657884877*^9, 3.6824187090493107`*^9}, 
   3.682418739128606*^9, {3.6824188139283867`*^9, 3.682418814515071*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\norder before \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"method\"\>", ",", "\<\"sample\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"output.file\"\>", 
       ",", "\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/\
output.csv\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"output\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"data.file\"\>", 
       ",", "\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/\
bernoulli.data.R\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"data\"\>", ",", "\<\"\"\>"}], "}"}]}], "}"}]}],
  SequenceForm[
  "\norder before ", {{"method", "sample"}, {
    "output.file", 
     "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.\
csv"}, {"output", ""}, {
    "data.file", 
     "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R"}, {"data", ""}}],
  Editable->False]], "Print",
 CellChangeTimes->{3.685947015856379*^9, 3.6859475744141617`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\norder ffter \"\>", 
   "\[InvisibleSpace]", "\<\"method=sample data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
\"\>"}],
  SequenceForm[
  "\norder ffter ", 
   "method=sample data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
"],
  Editable->False]], "Print",
 CellChangeTimes->{3.685947015856379*^9, 3.685947574435095*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\nDEBUG COMM \"\>", 
   "\[InvisibleSpace]", \
"\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli \
method=sample data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
\"\>"}],
  SequenceForm[
  "\nDEBUG COMM ", 
   "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli \
method=sample data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
"],
  Editable->False]], "Print",
 CellChangeTimes->{3.685947015856379*^9, 3.685947574438435*^9}]
}, Open  ]],

Cell[BoxData["\<\"method = sample (Default)\\n  sample\\n    num_samples = \
1000 (Default)\\n    num_warmup = 1000 (Default)\\n    save_warmup = 0 \
(Default)\\n    thin = 1 (Default)\\n    adapt\\n      engaged = 1 \
(Default)\\n      gamma = 0.050000000000000003 (Default)\\n      delta = \
0.80000000000000004 (Default)\\n      kappa = 0.75 (Default)\\n      t0 = 10 \
(Default)\\n      init_buffer = 75 (Default)\\n      term_buffer = 50 \
(Default)\\n      window = 25 (Default)\\n    algorithm = hmc (Default)\\n    \
  hmc\\n        engine = nuts (Default)\\n          nuts\\n            \
max_depth = 10 (Default)\\n        metric = diag_e (Default)\\n        \
stepsize = 1 (Default)\\n        stepsize_jitter = 0 (Default)\\nid = 0 \
(Default)\\ndata\\n  file = \
/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.data.R\
\\ninit = 2 (Default)\\nrandom\\n  seed = 3905156232\\noutput\\n  file = \
/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv\\n  \
diagnostic_file =  (Default)\\n  refresh = 100 (Default)\\n\\n\\nGradient \
evaluation took 7.6e-05 seconds\\n1000 transitions using 10 leapfrog steps \
per transition would take 0.76 seconds.\\nAdjust your expectations \
accordingly!\\n\\n\\nIteration:    1 / 2000 [  0%]  (Warmup)\\nIteration:  \
100 / 2000 [  5%]  (Warmup)\\nIteration:  200 / 2000 [ 10%]  \
(Warmup)\\nIteration:  300 / 2000 [ 15%]  (Warmup)\\nIteration:  400 / 2000 [ \
20%]  (Warmup)\\nIteration:  500 / 2000 [ 25%]  (Warmup)\\nIteration:  600 / \
2000 [ 30%]  (Warmup)\\nIteration:  700 / 2000 [ 35%]  (Warmup)\\nIteration:  \
800 / 2000 [ 40%]  (Warmup)\\nIteration:  900 / 2000 [ 45%]  \
(Warmup)\\nIteration: 1000 / 2000 [ 50%]  (Warmup)\\nIteration: 1001 / 2000 [ \
50%]  (Sampling)\\nIteration: 1100 / 2000 [ 55%]  (Sampling)\\nIteration: \
1200 / 2000 [ 60%]  (Sampling)\\nIteration: 1300 / 2000 [ 65%]  \
(Sampling)\\nIteration: 1400 / 2000 [ 70%]  (Sampling)\\nIteration: 1500 / \
2000 [ 75%]  (Sampling)\\nIteration: 1600 / 2000 [ 80%]  \
(Sampling)\\nIteration: 1700 / 2000 [ 85%]  (Sampling)\\nIteration: 1800 / \
2000 [ 90%]  (Sampling)\\nIteration: 1900 / 2000 [ 95%]  \
(Sampling)\\nIteration: 2000 / 2000 [100%]  (Sampling)\\n\\n Elapsed Time: \
0.33758 seconds (Warm-up)\\n               0.392311 seconds (Sampling)\\n     \
          0.729891 seconds (Total)\\n\"\>"], "Output",
 CellChangeTimes->{3.682418710371027*^9, 3.682418816110331*^9, 
  3.682419856814802*^9, 3.682676785965205*^9, 3.685947016578497*^9, 
  3.685947575151346*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use the results", "Subsection",
 CellChangeTimes->{{3.682418761262127*^9, 3.682418780426512*^9}, 
   3.6854244956405973`*^9}],

Cell[CellGroupData[{

Cell["List Header", "Subsubsection",
 CellChangeTimes->{{3.682418984257224*^9, 3.68241898893296*^9}, 
   3.685424500981132*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StanImportHeader", "[", "output", "]"}]], "Code",
 CellChangeTimes->{{3.68241879347968*^9, 3.682418980232958*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"lp__\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"accept_stat__\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"stepsize__\"\>", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"treedepth__\"\>", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"n_leapfrog__\"\>", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"divergent__\"\>", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"energy__\"\>", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"theta\"\>", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6824188073157473`*^9, 3.682418894317699*^9}, {
   3.682418927085154*^9, 3.682418955087871*^9}, 3.682419857136004*^9, 
   3.6826767862708807`*^9, 3.685947016695616*^9, 3.6859475788354883`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show sample matrix", "Subsubsection",
 CellChangeTimes->{{3.682419004043912*^9, 3.682419007401228*^9}, 
   3.68542450176199*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Dimensions", "[", 
  RowBox[{"StanImportData", "[", "output", "]"}], "]"}], "\n", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"StanImportData", "[", "output", "]"}], ",", "3"}], "]"}]}], "Code",\

 CellChangeTimes->{{3.682419038934704*^9, 3.682419072788485*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1000", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{{3.6824190569086237`*^9, 3.682419073284891*^9}, 
   3.682419857148364*^9, 3.682676786285335*^9, 3.685947016702612*^9, 
   3.685947580905786*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "504.989`"}], ",", "1.`", ",", "1.67312`", ",", "1.`", ",", 
     "1.`", ",", "0.`", ",", "505.259`", ",", "0.201746`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "504.989`"}], ",", "0.654456`", ",", "1.67312`", ",", "1.`",
      ",", "1.`", ",", "0.`", ",", "505.733`", ",", "0.201746`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "505.374`"}], ",", "0.897798`", ",", "1.67312`", ",", "1.`",
      ",", "1.`", ",", "0.`", ",", "505.385`", ",", "0.191573`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.6824190569086237`*^9, 3.682419073284891*^9}, 
   3.682419857148364*^9, 3.682676786285335*^9, 3.685947016702612*^9, 
   3.68594758090818*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plot \[Theta] sample and histogram", "Subsubsection",
 CellChangeTimes->{{3.682419126418578*^9, 3.682419151663189*^9}, 
   3.685424503719844*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"StanVariableColumn", "[", 
     RowBox[{"\"\<theta\>\"", ",", "output"}], "]"}], "]"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<\[Theta]\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"StanVariableColumn", "[", 
     RowBox[{"\"\<theta\>\"", ",", "output"}], "]"}], "]"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<\[Theta]\>\""}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.682419155903268*^9, 3.682419166605406*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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

     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0.17},
  PlotLabel->FormBox["\"\[Theta]\"", TraditionalForm],
  PlotRange->{{0., 1000.}, {0.17, 0.249426}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.682418972163571*^9, 3.68241916748027*^9, 
  3.68594758301509*^9}],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
   EdgeForm[Opacity[0.7]], {}, 
   {RGBColor[0.798413061722744, 0.824719615472648, 0.968322270542458], 
    EdgeForm[Opacity[0.7]], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.17, 0.}, {0.175, 9.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{20.5, 42.18775510204068}, {91.07959200026204, 
         102.43368479858951`}}],
       StatusArea[#, 9.]& ,
       TagBoxNote->"9."],
      StyleBox["9.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[9., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.175, 0.}, {0.18, 27.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{41.18775510204068, 62.87551020408159}, {
         70.37140640360712, 102.43368479858951`}}],
       StatusArea[#, 27.]& ,
       TagBoxNote->"27."],
      StyleBox["27.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[27., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.18, 0.}, {0.185, 38.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{61.87551020408159, 83.56326530612239}, {
         57.716404094540216`, 102.43368479858951`}}],
       StatusArea[#, 38.]& ,
       TagBoxNote->"38."],
      StyleBox["38.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[38., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.185, 0.}, {0.19, 72.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{82.56326530612239, 104.2510204081633}, {
         18.600942411969797`, 102.43368479858951`}}],
       StatusArea[#, 72.]& ,
       TagBoxNote->"72."],
      StyleBox["72.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[72., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.19, 0.}, {0.195, 108.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{103.2510204081633, 
         124.9387755102041}, {-22.81542878134006, 102.43368479858951`}}],
       StatusArea[#, 108.]& ,
       TagBoxNote->"108."],
      StyleBox["108.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[108., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.195, 0.}, {0.2, 163.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{123.9387755102041, 
         145.626530612245}, {-86.09044032667457, 102.43368479858951`}}],
       StatusArea[#, 163.]& ,
       TagBoxNote->"163."],
      StyleBox["163.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[163., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.2, 0.}, {0.205, 126.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{144.626530612245, 
         166.3142857142857}, {-43.523614377994974`, 102.43368479858951`}}],
       StatusArea[#, 126.]& ,
       TagBoxNote->"126."],
      StyleBox["126.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[126., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.205, 0.}, {0.21, 150.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{165.3142857142857, 
         187.00204081632648`}, {-71.13452850686822, 102.43368479858951`}}],
       StatusArea[#, 150.]& ,
       TagBoxNote->"150."],
      StyleBox["150.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[150., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.21, 0.}, {0.215, 113.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{186.00204081632648`, 
         207.6897959183674}, {-28.567702558188657`, 102.43368479858951`}}],
       StatusArea[#, 113.]& ,
       TagBoxNote->"113."],
      StyleBox["113.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[113., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.215, 0.}, {0.22, 90.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{206.6897959183674, 
         228.3775510204082}, {-2.1072431846851316`, 102.43368479858951`}}],
       StatusArea[#, 90.]& ,
       TagBoxNote->"90."],
      StyleBox["90.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[90., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.22, 0.}, {0.225, 48.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{227.3775510204082, 249.0653061224491}, {
         46.21185654084304, 102.43368479858951`}}],
       StatusArea[#, 48.]& ,
       TagBoxNote->"48."],
      StyleBox["48.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[48., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.225, 0.}, {0.23, 26.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{248.0653061224491, 269.7530612244899}, {
         71.52186115897683, 102.43368479858951`}}],
       StatusArea[#, 26.]& ,
       TagBoxNote->"26."],
      StyleBox["26.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[26., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.23, 0.}, {0.235, 21.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{268.7530612244899, 290.4408163265307}, {
         77.27413493582543, 102.43368479858951`}}],
       StatusArea[#, 21.]& ,
       TagBoxNote->"21."],
      StyleBox["21.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[21., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.235, 0.}, {0.24, 5.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{289.4408163265307, 311.1285714285715}, {
         95.68141102174091, 102.43368479858951`}}],
       StatusArea[#, 5.]& ,
       TagBoxNote->"5."],
      StyleBox["5.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[5., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.24, 0.}, {0.245, 2.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{310.1285714285715, 331.8163265306124}, {
         99.13277528785008, 102.43368479858951`}}],
       StatusArea[#, 2.]& ,
       TagBoxNote->"2."],
      StyleBox["2.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[2., {
        GrayLevel[0]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      TagBox[
       DynamicBox[{
         FEPrivate`If[
          CurrentValue["MouseOver"], 
          EdgeForm[{
            GrayLevel[0.5], 
            AbsoluteThickness[1.5], 
            Opacity[0.66]}], {}, {}], 
         RectangleBox[{0.245, 0.}, {0.25, 2.}, "RoundingRadius" -> 0]},
        ImageSizeCache->{{330.8163265306124, 352.5040816326532}, {
         99.13277528785008, 102.43368479858951`}}],
       StatusArea[#, 2.]& ,
       TagBoxNote->"2."],
      StyleBox["2.`", {
        GrayLevel[0]}, StripOnInput -> False]],
     Annotation[#, 
      Style[2., {
        GrayLevel[0]}], "Tooltip"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesOrigin->{0.17, 0.},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  PlotLabel->FormBox["\"\[Theta]\"", TraditionalForm],
  PlotRange->{{0.17, 0.25}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.1]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.682418972163571*^9, 3.68241916748027*^9, 
  3.68594758316965*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Maximimize likelihood with StanRunOptimize\
\>", "Subsection",
 CellChangeTimes->{{3.682419194475692*^9, 3.6824192177687273`*^9}, 
   3.685424505257321*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StanRunOptimize", "[", "\"\<bernoulli\>\"", "]"}]], "Code",
 CellChangeTimes->{{3.682419223603937*^9, 3.682419261853897*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\norder before \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"method\"\>", ",", "\<\"optimize\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"output.file\"\>", 
       ",", "\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/\
output.csv\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"output\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"data.file\"\>", 
       ",", "\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/\
bernoulli.data.R\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"data\"\>", ",", "\<\"\"\>"}], "}"}]}], "}"}]}],
  SequenceForm[
  "\norder before ", {{"method", "optimize"}, {
    "output.file", 
     "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.\
csv"}, {"output", ""}, {
    "data.file", 
     "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R"}, {"data", ""}}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6859470167144623`*^9, 3.6859475933503513`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\norder ffter \"\>", 
   "\[InvisibleSpace]", "\<\"method=optimize data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
\"\>"}],
  SequenceForm[
  "\norder ffter ", 
   "method=optimize data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
"],
  Editable->False]], "Print",
 CellChangeTimes->{3.6859470167144623`*^9, 3.685947593356584*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\nDEBUG COMM \"\>", 
   "\[InvisibleSpace]", \
"\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli \
method=optimize data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
\"\>"}],
  SequenceForm[
  "\nDEBUG COMM ", 
   "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli \
method=optimize data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv \
"],
  Editable->False]], "Print",
 CellChangeTimes->{3.6859470167144623`*^9, 3.685947593358739*^9}]
}, Open  ]],

Cell[BoxData["\<\"method = optimize\\n  optimize\\n    algorithm = lbfgs \
(Default)\\n      lbfgs\\n        init_alpha = 0.001 (Default)\\n        \
tol_obj = 9.9999999999999998e-13 (Default)\\n        tol_rel_obj = 10000 \
(Default)\\n        tol_grad = 1e-08 (Default)\\n        tol_rel_grad = \
10000000 (Default)\\n        tol_param = 1e-08 (Default)\\n        \
history_size = 5 (Default)\\n    iter = 2000 (Default)\\n    save_iterations \
= 0 (Default)\\nid = 0 (Default)\\ndata\\n  file = \
/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.data.R\
\\ninit = 2 (Default)\\nrandom\\n  seed = 3905175139\\noutput\\n  file = \
/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/output.csv\\n  \
diagnostic_file =  (Default)\\n  refresh = 100 (Default)\\n\\ninitial log \
joint probability = -503.257\\n    Iter      log prob        ||dx||      \
||grad||       alpha      alpha0  # evals  Notes \\n       3      -503.163   \
0.000281974   0.000386367           1           1        4   \\nOptimization \
terminated normally: \\n  Convergence detected: relative gradient magnitude \
is below tolerance\"\>"], "Output",
 CellChangeTimes->{3.6824192661914053`*^9, 3.682419857223185*^9, 
  3.682676786338161*^9, 3.68594701677133*^9, 3.685947593361846*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options manipulation", "Subsubsection",
 CellChangeTimes->{{3.6824193146849203`*^9, 3.682419325521161*^9}, 
   3.6853790706568336`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StanSetOptionOptimize", "[", 
    RowBox[{"\"\<output.file\>\"", ",", "\"\<output_optimize.csv\>\""}], 
    "]"}], ";"}], "    "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"StanSetOptionOptimize", "[", 
    RowBox[{"\"\<method.optimize.iter\>\"", ",", "100"}], "]"}], ";"}], 
  "                    "}], "\n", 
 RowBox[{
  RowBox[{"StanSetOptionOptimize", "[", 
   RowBox[{"\"\<method.optimize.algorithm\>\"", ",", "\"\<bfgs\>\""}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"StanSetOptionOptimize", "[", 
   RowBox[{"\"\<method.optimize.algorithm.bfgs.tol_grad\>\"", ",", 
    RowBox[{"10.", "^", 
     RowBox[{"-", "5"}]}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"StanOptionOptimize", "[", "]"}], " ", "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"re", "-", 
    RowBox[{
    "run", " ", "the", " ", "solver", " ", "with", " ", "the", " ", "new", 
     " ", "options"}]}], " ", "*)"}]}], "\n", 
 RowBox[{"StanRunOptimize", "[", "\"\<bernoulli\>\"", "]"}]}], "Code",
 CellChangeTimes->{{3.6824193338455973`*^9, 3.682419420695215*^9}, {
   3.682419453744855*^9, 3.682419498000065*^9}, {3.68241962317931*^9, 
   3.682419624711853*^9}, {3.6824197142101917`*^9, 3.682419757158187*^9}, {
   3.685379085864436*^9, 3.685379134589333*^9}, {3.685424524151052*^9, 
   3.6854245372509937`*^9}, {3.6858767096040077`*^9, 3.685876710658638*^9}, {
   3.685877059509417*^9, 3.685877085742985*^9}, {3.685877178194562*^9, 
   3.685877216748274*^9}, {3.685878578936784*^9, 3.685878582522401*^9}, {
   3.685879524607359*^9, 3.685879528157631*^9}, {3.68594688505404*^9, 
   3.685946968970249*^9}, 3.685947077623857*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm.bfgs.tol_grad\"\>", ",", 
     "0.00001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm\"\>", ",", "\<\"bfgs\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.iter\"\>", ",", "100"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"output.file\"\>", ",", "\<\"output_optimize.csv\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.685947058696332*^9, 3.685947079076234*^9}, 
   3.6859476012266703`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\norder before \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"method\"\>", ",", "\<\"optimize\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"output\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"data.file\"\>", 
       ",", "\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/\
bernoulli.data.R\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"data\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"method.optimize.algorithm.bfgs.tol_grad\"\>", ",", 
       "0.00001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"method.optimize.algorithm\"\>", ",", "\<\"bfgs\"\>"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"method.optimize.iter\"\>", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"output.file\"\>", ",", "\<\"output_optimize.csv\"\>"}], 
      "}"}]}], "}"}]}],
  SequenceForm[
  "\norder before ", {{"method", "optimize"}, {"output", ""}, {
    "data.file", 
     "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R"}, {"data", ""}, {
    "method.optimize.algorithm.bfgs.tol_grad", 0.00001}, {
    "method.optimize.algorithm", "bfgs"}, {"method.optimize.iter", 100}, {
    "output.file", "output_optimize.csv"}}],
  Editable->False]], "Print",
 CellChangeTimes->{{3.6859470586980877`*^9, 3.685947079079228*^9}, 
   3.685947601229042*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\norder ffter \"\>", 
   "\[InvisibleSpace]", "\<\"method=optimize algorithm=bfgs tol_grad=0.00001 \
iter=100 data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output file=output_optimize.csv \"\>"}],
  SequenceForm[
  "\norder ffter ", 
   "method=optimize algorithm=bfgs tol_grad=0.00001 iter=100 data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output file=output_optimize.csv "],
  Editable->False]], "Print",
 CellChangeTimes->{{3.6859470586980877`*^9, 3.685947079079228*^9}, 
   3.6859476012310677`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"\\nDEBUG COMM \"\>", 
   "\[InvisibleSpace]", \
"\<\"/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli \
method=optimize algorithm=bfgs tol_grad=0.00001 iter=100 data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output file=output_optimize.csv \"\>"}],
  SequenceForm[
  "\nDEBUG COMM ", 
   "/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli \
method=optimize algorithm=bfgs tol_grad=0.00001 iter=100 data \
file=/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.\
data.R output file=output_optimize.csv "],
  Editable->False]], "Print",
 CellChangeTimes->{{3.6859470586980877`*^9, 3.685947079079228*^9}, 
   3.685947601232864*^9}]
}, Open  ]],

Cell[BoxData["\<\"method = optimize\\n  optimize\\n    algorithm = bfgs\\n    \
  bfgs\\n        init_alpha = 0.001 (Default)\\n        tol_obj = \
9.9999999999999998e-13 (Default)\\n        tol_rel_obj = 10000 (Default)\\n   \
     tol_grad = 1.0000000000000001e-05\\n        tol_rel_grad = 10000000 \
(Default)\\n        tol_param = 1e-08 (Default)\\n    iter = 100\\n    \
save_iterations = 0 (Default)\\nid = 0 (Default)\\ndata\\n  file = \
/IS006139/home/pix/GitHub/MathematicaStan/Examples/Bernoulli/bernoulli.data.R\
\\ninit = 2 (Default)\\nrandom\\n  seed = 3905183039\\noutput\\n  file = \
output_optimize.csv\\n  diagnostic_file =  (Default)\\n  refresh = 100 \
(Default)\\n\\ninitial log joint probability = -509.38\\n    Iter      log \
prob        ||dx||      ||grad||       alpha      alpha0  # evals  Notes \\n  \
     3      -503.163    0.00602324    0.00906579      0.9195      0.9195      \
  4   \\nOptimization terminated normally: \\n  Convergence detected: \
relative gradient magnitude is below tolerance\"\>"], "Output",
 CellChangeTimes->{{3.685947058696332*^9, 3.685947079076234*^9}, 
   3.685947601234745*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Overwrite and/or reset option", "Subsubsection",
 CellChangeTimes->{{3.6824195682797337`*^9, 3.6824195992722807`*^9}, {
  3.6854246648167048`*^9, 3.685424665609723*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"StanOptionOptimize", "[", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"StanSetOptionOptimize", "[", 
    RowBox[{"\"\<method.optimize.iter\>\"", ",", "2016"}], "]"}], ";"}], 
  "  "}], "\n", 
 RowBox[{"StanOptionOptimize", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.682419619227124*^9, 3.6824197028037367`*^9}, {
  3.685947667140133*^9, 3.6859477017229424`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm.bfgs.tol_grad\"\>", ",", 
     "0.00001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm\"\>", ",", "\<\"bfgs\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.iter\"\>", ",", "100"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"output.file\"\>", ",", "\<\"output_optimize.csv\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.685947702717717*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm.bfgs.tol_grad\"\>", ",", 
     "0.00001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm\"\>", ",", "\<\"bfgs\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.iter\"\>", ",", "2016"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"output.file\"\>", ",", "\<\"output_optimize.csv\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.685947702719322*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Remove all method* options", "Subsubsection",
 CellChangeTimes->{{3.685947745436985*^9, 3.685947761804044*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"StanOptionOptimize", "[", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"StanRemoveOptionOptimize", "[", "\"\<method*\>\"", "]"}], ";"}], 
  "  "}], "\n", 
 RowBox[{"StanOptionOptimize", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.685947776966713*^9, 3.685947786978231*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm.bfgs.tol_grad\"\>", ",", 
     "0.00001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.algorithm\"\>", ",", "\<\"bfgs\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"method.optimize.iter\"\>", ",", "2016"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"output.file\"\>", ",", "\<\"output_optimize.csv\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6859477901282377`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"output.file\"\>", ",", "\<\"output_optimize.csv\"\>"}], "}"}],
   "}"}]], "Output",
 CellChangeTimes->{3.6859477901295357`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Erase all options", "Subsubsection",
 CellChangeTimes->{{3.685947716612473*^9, 3.685947721850865*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"StanOptionOptimize", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"StanResetOptionOptimize", "[", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"StanOptionOptimize", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.68594773109583*^9, 3.685947735023179*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"output.file\"\>", ",", "\<\"output_optimize.csv\"\>"}], "}"}],
   "}"}]], "Output",
 CellChangeTimes->{3.685947793660843*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.6859477936622133`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1680, 1015},
WindowMargins->{{0, Automatic}, {Automatic, 3}},
WindowFrame->"Normal",
ShowSelection->True,
FrontEndVersion->"8.0 for Linux x86 (64-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 102, 1, 88, "Title"],
Cell[CellGroupData[{
Cell[706, 27, 244, 5, 39, "Subsection"],
Cell[CellGroupData[{
Cell[975, 36, 811, 17, 163, "Code"],
Cell[1789, 55, 434, 6, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2272, 67, 330, 4, 39, "Subsection"],
Cell[CellGroupData[{
Cell[2627, 75, 984, 22, 370, "Code"],
Cell[3614, 99, 229, 3, 30, "Output"],
Cell[3846, 104, 314, 5, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[4209, 115, 186, 2, 39, "Subsection"],
Cell[4398, 119, 862, 25, 104, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5297, 149, 164, 2, 39, "Subsection"],
Cell[CellGroupData[{
Cell[5486, 155, 392, 8, 85, "Code"],
Cell[CellGroupData[{
Cell[5903, 167, 1125, 28, 62, "Print"],
Cell[7031, 197, 636, 16, 62, "Print"],
Cell[7670, 215, 782, 19, 62, "Print"]
}, Open  ]],
Cell[8467, 237, 2534, 35, 1285, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11050, 278, 131, 2, 39, "Subsection"],
Cell[CellGroupData[{
Cell[11206, 284, 127, 2, 28, "Subsubsection"],
Cell[CellGroupData[{
Cell[11358, 290, 138, 2, 46, "Code"],
Cell[11499, 294, 869, 21, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12417, 321, 134, 2, 28, "Subsubsection"],
Cell[CellGroupData[{
Cell[12576, 327, 289, 7, 66, "Code"],
Cell[12868, 336, 240, 5, 30, "Output"],
Cell[13111, 343, 780, 18, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13940, 367, 151, 2, 28, "Subsubsection"],
Cell[CellGroupData[{
Cell[14116, 373, 600, 14, 66, "Code"],
Cell[14719, 389, 10797, 184, 251, "Output"],
Cell[25519, 575, 11181, 340, 256, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36761, 922, 166, 4, 39, "Subsection"],
Cell[CellGroupData[{
Cell[36952, 930, 149, 2, 46, "Code"],
Cell[CellGroupData[{
Cell[37126, 936, 1131, 28, 62, "Print"],
Cell[38260, 966, 642, 16, 62, "Print"],
Cell[38905, 984, 788, 19, 62, "Print"]
}, Open  ]],
Cell[39708, 1006, 1288, 17, 563, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41033, 1028, 141, 2, 28, "Subsubsection"],
Cell[CellGroupData[{
Cell[41199, 1034, 1670, 36, 180, "Code"],
Cell[42872, 1072, 567, 15, 30, "Output"],
Cell[CellGroupData[{
Cell[43464, 1091, 1505, 36, 62, "Print"],
Cell[44972, 1129, 644, 14, 43, "Print"],
Cell[45619, 1145, 786, 16, 62, "Print"]
}, Open  ]],
Cell[46420, 1164, 1136, 15, 544, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47605, 1185, 175, 2, 28, "Subsubsection"],
Cell[CellGroupData[{
Cell[47805, 1191, 390, 9, 85, "Code"],
Cell[48198, 1202, 515, 14, 30, "Output"],
Cell[48716, 1218, 516, 14, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[49281, 1238, 117, 1, 28, "Subsubsection"],
Cell[CellGroupData[{
Cell[49423, 1243, 299, 7, 85, "Code"],
Cell[49725, 1252, 518, 14, 30, "Output"],
Cell[50246, 1268, 188, 5, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50483, 1279, 108, 1, 28, "Subsubsection"],
Cell[CellGroupData[{
Cell[50616, 1284, 289, 5, 85, "Code"],
Cell[50908, 1291, 186, 5, 30, "Output"],
Cell[51097, 1298, 89, 2, 30, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
